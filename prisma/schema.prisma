generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  avatar        String?
  role          String    @default("user")
  stripeCustomerId String?  @unique
  stripeAccountId  String?  @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth Relations
  accounts      Account[]
  sessions      Session[]
  
  // App Relations
  bookmarks         Bookmark[]
  folders           Folder[]
  userSettings      UserSettings?
  aiSettings        AiSettings?
  tasks             Task[]
  pomodoroSessions  PomodoroSession[]
  notifications     UserNotification[]
  
  // Marketplace relationships
  listings          Listing[]
  orders            Order[]   @relation("BuyerOrders")
  reviews           Review[]
  payouts           Payout[]
  
  @@map("users")
}

model Bookmark {
  id                  String    @id @default(cuid())
  userId              String
  title               String
  url                 String
  description         String    @default("")
  category            String    @default("General")
  tags                String[]  @default([])
  
  // AI Features
  aiSummary           String?
  aiTags              String[]  @default([])
  aiCategory          String?
  
  notes               String?
  priority            Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Site Health
  siteHealth          SiteHealth @default(working)
  lastHealthCheck     DateTime?
  healthCheckCount    Int       @default(0)
  
  // Customization
  customBackground    String?
  favicon             String?
  customFavicon       String?
  customLogo          String?
  
  // Analytics
  visits              Int       @default(0)
  timeSpent           Int       @default(0)
  relatedBookmarks    String[]  @default([])
  
  // Folder relationship
  folderId            String?
  folder              Folder?   @relation(fields: [folderId], references: [id])
  
  // User relationship
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category])
  @@index([createdAt])
  @@map("bookmarks")
}

model Folder {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String     @default("blue")
  icon        String     @default("Folder")
  parentId    String?
  position    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?    @relation("FolderParent", fields: [parentId], references: [id])
  children    Folder[]   @relation("FolderParent")
  bookmarks   Bookmark[]
  
  @@index([userId])
  @@index([parentId])
  @@map("folders")
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Theme preferences
  theme                 Theme    @default(system)
  accentColor           String   @default("blue")
  customColor           String?
  fontSize              Int      @default(14)
  dyslexiaFont          Boolean  @default(false)
  layoutDensity         String   @default("comfortable")
  
  // Behavior
  autoSave              Boolean  @default(true)
  defaultView           String   @default("grid")
  itemsPerPage          Int      @default(20)
  autoRefresh           Boolean  @default(true)
  refreshInterval       Int      @default(300)
  
  // Notifications
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  weekStartDay          Int      @default(0)
  
  // Privacy
  dataSharing           Boolean  @default(false)
  analyticsEnabled      Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model AiSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  settings        Json     @default("{}")
  autoProcessing  Boolean  @default(true)
  smartTags       Boolean  @default(true)
  autoCategory    Boolean  @default(true)
  summaryLength   String   @default("medium")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ai_settings")
}

model Task {
  id                String        @id @default(cuid())
  userId            String
  title             String
  description       String?
  categoryId        String?
  priorityLevel     Int           @default(3)
  status            TaskStatus    @default(pending)
  deadline          DateTime?
  estimatedDuration Int?          // in minutes
  actualDuration    Int?          // in minutes
  isRecurring       Boolean       @default(false)
  recurringPattern  String?       // 'daily', 'weekly', 'monthly'
  tags              String[]      @default([])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  completedAt       DateTime?
  
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  pomodoroSessions  PomodoroSession[]
  
  @@index([userId])
  @@map("tasks")
}

model PomodoroSession {
  id                String   @id @default(cuid())
  userId            String
  taskId            String?
  taskTitle         String?
  startTime         DateTime @default(now())
  endTime           DateTime?
  duration          Int      // in minutes
  type              String   // 'work', 'shortBreak', 'longBreak'
  isCompleted       Boolean  @default(false)
  wasInterrupted    Boolean  @default(false)
  productivityScore Int?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task              Task?    @relation(fields: [taskId], references: [id])
  
  @@index([userId])
  @@map("pomodoro_sessions")
}

model UserNotification {
  id          String              @id @default(cuid())
  userId      String
  type        NotificationType    @default(reminder)
  title       String
  message     String?
  isRead      Boolean             @default(false)
  data        Json                @default("{}")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@map("user_notifications")
}

// Enums
enum SiteHealth {
  excellent
  working
  fair
  poor
  broken
}

enum Theme {
  light
  dark
  system
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

enum NotificationType {
  reminder
  achievement
  system
  bookmark_suggestion
  folder_suggestion
}

// Marketplace Models
model Listing {
  id          String   @id @default(cuid())
  sellerId    String
  title       String
  description String
  thumbnail   String
  priceCents  Int
  currency    String   @default("USD")
  category    String
  tags        String[]
  bookmarkData Json    // Stores BookmarkData as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  isActive    Boolean  @default(true)

  // Relationships
  seller  User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]

  // Indexes
  @@index([sellerId])
  @@index([category])
  @@index([priceCents])
  @@index([ratingAvg])
  @@index([createdAt])
  @@index([isActive])
  @@map("listings")
}

model Order {
  id              String   @id @default(cuid())
  buyerId         String
  listingId       String
  totalCents      Int
  currency        String   @default("USD")
  status          String   // OrderStatus enum
  paymentIntentId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  buyer   User    @relation("BuyerOrders", fields: [buyerId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  // Indexes
  @@index([buyerId])
  @@index([listingId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, listingId]) // One review per user per listing
  @@index([listingId])
  @@index([rating])
  @@index([createdAt])
  @@map("reviews")
}

model Payout {
  id               String   @id @default(cuid())
  sellerId         String
  amountCents      Int
  currency         String   @default("USD")
  status           String   // PayoutStatus enum
  stripeTransferId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  seller User @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@map("payouts")
}
